//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Runtime"",
            ""id"": ""870e509e-499f-4bd5-87f2-7dd51fb06be8"",
            ""actions"": [
                {
                    ""name"": ""TestAudio"",
                    ""type"": ""Button"",
                    ""id"": ""4463e7c2-825c-47f2-9251-6cfc4b156810"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b1ae2a44-28b1-4b7b-bbc1-fff77a6c8c81"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19e50893-014f-437a-adac-994f397af092"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestAudio"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c9335d44-21e8-45a4-b4aa-4ff0ae809857"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e76c958d-fc7b-4dbc-a604-093bb0599286"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6a67998a-7aae-4dab-90f8-008aac4e68f4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0939283d-53a7-4320-83a9-b129d129dcae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""21811d03-dfa1-47a0-ab1a-7e81b0e9fb3f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0b879bf8-a9c0-4aae-917c-b9ff5789e76b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b6891545-35c3-4459-81e3-9ac69934374b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""79cda6b6-45cf-49fa-804e-55377d0fac27"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5222a300-4c25-4c92-b291-806c7f9960ec"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7c3f0123-4ecb-42a6-bd8c-d51ee7bf0162"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Runtime
        m_Runtime = asset.FindActionMap("Runtime", throwIfNotFound: true);
        m_Runtime_TestAudio = m_Runtime.FindAction("TestAudio", throwIfNotFound: true);
        m_Runtime_Movement = m_Runtime.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Runtime
    private readonly InputActionMap m_Runtime;
    private List<IRuntimeActions> m_RuntimeActionsCallbackInterfaces = new List<IRuntimeActions>();
    private readonly InputAction m_Runtime_TestAudio;
    private readonly InputAction m_Runtime_Movement;
    public struct RuntimeActions
    {
        private @PlayerInputs m_Wrapper;
        public RuntimeActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @TestAudio => m_Wrapper.m_Runtime_TestAudio;
        public InputAction @Movement => m_Wrapper.m_Runtime_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Runtime; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RuntimeActions set) { return set.Get(); }
        public void AddCallbacks(IRuntimeActions instance)
        {
            if (instance == null || m_Wrapper.m_RuntimeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RuntimeActionsCallbackInterfaces.Add(instance);
            @TestAudio.started += instance.OnTestAudio;
            @TestAudio.performed += instance.OnTestAudio;
            @TestAudio.canceled += instance.OnTestAudio;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IRuntimeActions instance)
        {
            @TestAudio.started -= instance.OnTestAudio;
            @TestAudio.performed -= instance.OnTestAudio;
            @TestAudio.canceled -= instance.OnTestAudio;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IRuntimeActions instance)
        {
            if (m_Wrapper.m_RuntimeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRuntimeActions instance)
        {
            foreach (var item in m_Wrapper.m_RuntimeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RuntimeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RuntimeActions @Runtime => new RuntimeActions(this);
    public interface IRuntimeActions
    {
        void OnTestAudio(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
